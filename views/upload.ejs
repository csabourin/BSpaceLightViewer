<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="/public/favicon-mobile.ico">
  <title>Admin Console</title>
  <link rel="stylesheet" href="/public/admin.css">


</head>

<body>
  <div class="container">
    <a href="/">Back</a>
    <h1>Admin Console</h1>
    <form id="uploadForm" action="/upload" method="post" enctype="multipart/form-data">
      <legend>Upload Package</legend>
      <input id="zipFileInput" type="file" name="zipFile" accept=".zip">
      <input type="submit" value="Upload">
    </form>


    <% for(let i=0; i<packageFiles.length; i++) { %>
      <div class="renamer">
        <h2><%= packageFiles[i].title %></h2>
        <div class="renamer__header">
          <% if(packageFiles[i].imageUrl){ %>
            <img class="renamer__image" src="<%= packageFiles[i].imageUrl %>">
            <% } else { %>
              <div style="position:relative;display:inline-block;height:auto;width:300px;"></div>
              <% } %>
                <form action="/uploadImage" method="post" enctype="multipart/form-data" style="display: inline;">
                  <p>Change cover image</p>
                  <input type="file" id="imageFile_<%= i %>" name="imageFile" accept="image/*" onchange="checkFileSelected('imageFile_<%= i %>'); toggleButton('uploadImageButton_<%= i %>')">

                  <input type="hidden" name="zipFileName" value="<%= packageFiles[i].file %>">
                  <input type="submit" id="uploadImageButton_<%= i %>" value="Upload Image">
                </form>
        </div>
        <div class="renamer__body">
          <div class="renamer__file-renaming">
            <input id="file_<%= i %>" class="fileName" value="<%= packageFiles[i].file.replace(/\.[^/.]+$/, "") %>">
            <button onclick="renameFile('<%= packageFiles[i].file%>', 'file_<%= i %>')">Rename</button>
          </div>
          <form id="descForm_<%= i %>" class="renamer__form">
            <div class="renamer__form__group">
              <h3>Add description</h3>
              <textarea lang="<%= packageFiles[i].lang %>" id="desc_<%= i %>" rows=5 placeholder="Description" name="description"
                oninput="updateCharCount('desc_<%= i %>', 215)"><% if(packageFiles[i].description){ %><%= packageFiles[i].description %><% } %></textarea>
              <div id="desc_<%= i %>_remaining">215 characters maximum</div>
            </div>
            <div class="renamer__form__group">
              <h4>Add tags</h4>
              <input type="text" value="<%= packageFiles[i].tags %>" name="tags" placeholder="Tags (separate by space)">
              <input type="hidden" name="zipFileName" value="<%= packageFiles[i].file %>">
              <input type="submit" value="Set Description and tags" onclick="submitDescription('descForm_<%= i %>')">
            </div>
          </form>
<div class="renamer__form__group">
          <form id="replaceForm_<%= i %>" enctype="multipart/form-data" style="display: inline;" onsubmit="replacePackage(event, '<%= packageFiles[i].file %>', 'replaceForm_<%= i %>'); return false;">
  <h3>Replace this package</h3>
  <input type="file" id="replacementPackage_<%= i %>" name="replacementPackage" accept=".zip" onchange="checkFileSelected('replacementPackage_<%= i %>'); toggleButton('replaceButton_<%= i %>')">

  <input type="hidden" name="originalPackageName" value="<%= packageFiles[i].file %>">
  <input type="submit" id="replaceButton_<%= i %>" value="Upload Replacement">
</form>

</div>  
        </div>

        <div class="renamer__footer">
          <button onclick="deletePackage('<%= packageFiles[i].file %>')">Delete package</button>
        </div>
      </div>
      <% } %>

        <script>

          function checkFileSelected(inputId) {
  let fileInput = document.getElementById(inputId);
  if (!fileInput.files.length) {
    alert("Please select a file before submitting");
    return false;
  } else {return true;}
}

          document.getElementById('uploadForm').addEventListener('submit', function (e) {
            const fileInput = document.getElementById('zipFileInput');

            if (!fileInput.files.length) {
              e.preventDefault();
              alert("Please select a file before submitting");
            }
          });


          function submitDescription(formId) {
            const maxLength = 215;
            let form = document.getElementById(formId);
            let formData = new FormData(form);
            let description = formData.get('description');
            if (description.length > maxLength) {
              alert('Description is too long, it should be less than 215 characters');
              return;
            }

            let data = {
              description: formData.get('description'),
              tags: formData.get('tags')
                .split(/[\s,]+/)
                .map(tag => tag.trim())
                .filter(Boolean),
              zipFileName: formData.get('zipFileName'),
            };

            // send a post request to the server with the description and tags
            fetch('/addDescription', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
            }).then((response) => {
              if (response.ok) {
                alert('Description added successfully');
                location.reload(true);
              } else {
                alert('Error adding description');
              }
            });
          }

          function updateCharCount(textareaId, maxLength) {
            let textarea = document.getElementById(textareaId);
            let remainingCharsDiv = document.getElementById(textareaId + '_remaining');

            let currentLength = textarea.value.length;
            let charsRemaining = maxLength - currentLength;

            remainingCharsDiv.textContent = charsRemaining + ' characters remaining';

            // If there are no characters remaining, add a red color to the text to indicate an error
            if (charsRemaining < 0) {
              remainingCharsDiv.style.color = 'red';
            } else {
              remainingCharsDiv.style.color = 'black';
            }
          }

          function renameFile(source, targetId) {
            let target = document.getElementById(targetId).value + '.zip';
            // send a post request to the server with the old and new filenames
            fetch('/rename', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ old: source, new: target })
            }).then((response) => {
              if (response.ok) {
                alert('File renamed successfully');
                location.reload(true);
              } else {
                alert('Error renaming file');
              }
            });
          }

          function deletePackage(fileName) {
            // Display a confirmation dialog
            if (confirm("Are you sure you want to delete this package?")) {
              // Send a post request to the server to delete the package
              fetch('/delete', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ fileName: fileName })
              }).then((response) => {
                if (response.ok) {
                  alert('Package deleted successfully');
                  location.reload(true);
                } else {
                  alert('Error deleting package');
                }
              });
            }
          }

          function replacePackage(event, originalPackageName, formId) {
  event.preventDefault();
  let form = document.getElementById(formId);
  let formData = new FormData(form);

  // check if a replacement package was selected
  if (!formData.get('replacementPackage').size) {
    alert('Please select a replacement package before submitting');
    return;
  }

  // send a post request to the server with the form data
  fetch('/replacePackage', {
    method: 'POST',
    body: formData
  }).then((response) => {
    if (response.ok) {
      alert('Package replaced successfully');
      location.reload(true);
    } else {
      alert('Error replacing package');
    }
  });
}


        </script>
  </div>
</body>

</html>